{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nconst Contacts = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const handleEmailChange = event => {\n    const {\n      value\n    } = event.target;\n    setEmail(value);\n    setIsEmailValid(validateEmail(value));\n  };\n  const handlePasswordChange = event => {\n    const {\n      value\n    } = event.target;\n    setPassword(value);\n    setIsPasswordValid(validatePassword(value));\n  };\n  const validateEmail = email => {\n    // Expresión regular para validar el formato del correo\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  const validatePassword = password => {\n    // Verificar si la longitud de la clave es de al menos 6 dígitos\n    return password.length >= 6;\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Validar ambos campos antes de enviar el formulario\n    const isFormValid = validateEmail(email) && validatePassword(password);\n    if (isFormValid) {\n      // Aquí puedes realizar alguna acción con los datos ingresados, como enviarlos a un servidor, por ejemplo.\n      console.log('Datos válidos:', {\n        email,\n        password\n      });\n    } else {\n      console.log('Datos inválidos. Por favor, verifica el correo y la clave.');\n    }\n  };\n};\n_s(Contacts, \"SJhADM8kSM22zZKGvU3OlvzHZDo=\");\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useState","Contacts","_s","email","setEmail","password","setPassword","isEmailValid","setIsEmailValid","isPasswordValid","setIsPasswordValid","handleEmailChange","event","value","target","validateEmail","handlePasswordChange","validatePassword","emailRegex","test","length","handleSubmit","preventDefault","isFormValid","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Camssitto/Desktop/Longdino/src/Components/Contact.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Contacts = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isEmailValid, setIsEmailValid] = useState(true);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\r\n\r\n  const handleEmailChange = (event) => {\r\n    const { value } = event.target;\r\n    setEmail(value);\r\n    setIsEmailValid(validateEmail(value));\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    const { value } = event.target;\r\n    setPassword(value);\r\n    setIsPasswordValid(validatePassword(value));\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    // Expresión regular para validar el formato del correo\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    // Verificar si la longitud de la clave es de al menos 6 dígitos\r\n    return password.length >= 6;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Validar ambos campos antes de enviar el formulario\r\n    const isFormValid = validateEmail(email) && validatePassword(password);\r\n\r\n    if (isFormValid) {\r\n      // Aquí puedes realizar alguna acción con los datos ingresados, como enviarlos a un servidor, por ejemplo.\r\n      console.log('Datos válidos:', { email, password });\r\n    } else {\r\n      console.log('Datos inválidos. Por favor, verifica el correo y la clave.');\r\n    }\r\n  };\r\n\r\n\r\n};\r\n\r\nexport default Contacts;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMW,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAM;MAAEC;IAAM,CAAC,GAAGD,KAAK,CAACE,MAAM;IAC9BV,QAAQ,CAACS,KAAK,CAAC;IACfL,eAAe,CAACO,aAAa,CAACF,KAAK,CAAC,CAAC;EACvC,CAAC;EAED,MAAMG,oBAAoB,GAAIJ,KAAK,IAAK;IACtC,MAAM;MAAEC;IAAM,CAAC,GAAGD,KAAK,CAACE,MAAM;IAC9BR,WAAW,CAACO,KAAK,CAAC;IAClBH,kBAAkB,CAACO,gBAAgB,CAACJ,KAAK,CAAC,CAAC;EAC7C,CAAC;EAED,MAAME,aAAa,GAAIZ,KAAK,IAAK;IAC/B;IACA,MAAMe,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACC,IAAI,CAAChB,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMc,gBAAgB,GAAIZ,QAAQ,IAAK;IACrC;IACA,OAAOA,QAAQ,CAACe,MAAM,IAAI,CAAC;EAC7B,CAAC;EAED,MAAMC,YAAY,GAAIT,KAAK,IAAK;IAC9BA,KAAK,CAACU,cAAc,CAAC,CAAC;;IAEtB;IACA,MAAMC,WAAW,GAAGR,aAAa,CAACZ,KAAK,CAAC,IAAIc,gBAAgB,CAACZ,QAAQ,CAAC;IAEtE,IAAIkB,WAAW,EAAE;MACf;MACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;QAAEtB,KAAK;QAAEE;MAAS,CAAC,CAAC;IACpD,CAAC,MAAM;MACLmB,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;IAC3E;EACF,CAAC;AAGH,CAAC;AAACvB,EAAA,CA5CID,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AA8Cd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}